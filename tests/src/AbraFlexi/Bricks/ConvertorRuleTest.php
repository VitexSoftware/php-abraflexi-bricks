<?php

declare(strict_types=1);

/**
 * This file is part of the BricksForAbraFlexi package
 *
 * https://github.com/VitexSoftware/php-abraflexi-bricks
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\AbraFlexi\Bricks;

use AbraFlexi\Bricks\ConvertorRule;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2022-11-23 at 23:27:05.
 */
class ConvertorRuleTest extends \PHPUnit\Framework\TestCase
{
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new ConvertorRule();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \AbraFlexi\Bricks\ConvertorRule::assignConvertor
     * @covers \AbraFlexi\Bricks\ConvertorRule::getConvertor
     */
    public function testassignConvertor(): void
    {
        $convertor = new \AbraFlexi\Bricks\Convertor();
        $this->object->assignConvertor($convertor);
        $this->assertEquals($this->object->getConvertor(), $convertor);
    }

    /**
     * @covers \AbraFlexi\Bricks\ConvertorRule::addExtId
     *
     * @todo   Implement testaddExtId().
     */
    public function testaddExtId(): void
    {
        $testConvertor = new \AbraFlexi\Bricks\Convertor(new \AbraFlexi\FakturaPrijata(), new \AbraFlexi\FakturaVydana());
        $this->object->assignConvertor($testConvertor);
        $this->object->addExtId();
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\Bricks\ConvertorRule::getRules
     *
     * @todo   Implement testgetRules().
     */
    public function testgetRules(): void
    {
        $this->assertEquals([], $this->object->getRules());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\Bricks\ConvertorRule::getRuleForColumn
     *
     * @todo   Implement testgetRuleForColumn().
     */
    public function testgetRuleForColumn(): void
    {
        $this->assertEquals('', $this->object->getRuleForColumn('testColumn'));
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\Bricks\ConvertorRule::convertorClassTemplateGenerator
     *
     * @todo   Implement testconvertorClassTemplateGenerator().
     */
    public function testconvertorClassTemplateGenerator(): void
    {
        // This is a static method, need to call it differently
        $this->markTestIncomplete('This test requires convertor object setup.');
    }

    /**
     * @covers \AbraFlexi\Bricks\ConvertorRule::getOposites
     *
     * @todo   Implement testgetOposites().
     */
    public function testgetOposites(): void
    {
        // This is a static method, need to call it differently
        $result = ConvertorRule::getOposites([], []);
        $this->assertIsArray($result);
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers \AbraFlexi\Bricks\ConvertorRule::finalizeConversion
     */
    public function testfinalizeConversion(): void
    {
        $this->assertIsBool($this->object->finalizeConversion());
    }
}
