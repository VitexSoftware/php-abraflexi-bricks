<?php

declare(strict_types=1);

/**
 * This file is part of the BricksForAbraFlexi package
 *
 * https://github.com/VitexSoftware/php-abraflexi-bricks
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\AbraFlexi\Bricks;

use AbraFlexi\Bricks\HookReciever;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-04-20 at 20:42:56.
 */
class HookRecieverTest extends \PHPUnit\Framework\TestCase
{
    protected HookReciever $object;

    /**
     * Sets up the fixture, for example, opens a network connection
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new HookReciever(
            null,
            ['debug' => true, 'throwException' => false],
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * Fake Change ID.
     *
     * @return int
     */
    public static function getFakeChangeId()
    {
        return time() - 1524247660;
    }

    /**
     * @covers \AbraFlexi\Bricks\HookReciever::listen
     */
    public function testListen(): void
    {
        $this->object->listen();
        $this->object->listen('tests/config.json');
        $this->object->listen('tests/phpunit.xml');
    }

    /**
     * @covers \AbraFlexi\Bricks\HookReciever::takeChanges
     */
    public function testTakeChanges(): void
    {
        $this->object->takeChanges(null);
        $this->assertEquals(
            254924,
            $this->object->takeChanges($this->object->listen('tests/changes.json')),
        );
    }

    /**
     * @covers \AbraFlexi\Bricks\HookReciever::processChanges
     *
     * @depends testTakeChanges
     */
    public function testProcessChanges(): void
    {
        $this->object->processChanges();
        $globalVersion = self::getFakeChangeId();
        $changes = $this->object->listen('tests/changes.json');

        foreach ($changes['winstrom']['changes'] as $chPos => $change) {
            $changes['winstrom']['changes'][$chPos]['@in-version'] = $globalVersion++;
        }

        $changes['winstrom']['@globalVersion'] = $globalVersion;
        $this->object->takeChanges($changes);
        $this->object->processChanges();
    }

    /**
     * @covers \AbraFlexi\Bricks\HookReciever::getLastProcessedVersion
     * @covers \AbraFlexi\Bricks\HookReciever::saveLastProcessedVersion
     */
    public function testSaveLastProcessedVersion(): void
    {
        $this->object->saveLastProcessedVersion(1);
        $fchid = self::getFakeChangeId();
        $this->object->saveLastProcessedVersion($fchid);
        $this->assertEquals($fchid, $this->object->getLastProcessedVersion());
    }
}
