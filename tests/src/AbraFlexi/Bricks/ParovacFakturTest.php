<?php

declare(strict_types=1);

/**
 * This file is part of the BricksForAbraFlexi package
 *
 * https://github.com/VitexSoftware/php-abraflexi-bricks
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\AbraFlexi\Bricks;

use AbraFlexi\Bricks\ParovacFaktur;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-04-17 at 19:11:15.
 */
class ParovacFakturTest extends \Test\Ease\SandTest
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new ParovacFaktur(['LABEL_PREPLATEK' => 'PREPLATEK', 'LABEL_CHYBIFAKTURA' => 'CHYBIFAKTURA',
            'LABEL_NEIDENTIFIKOVANO' => 'NEIDENTIFIKOVANO', 'LABEL_OVERPAY' => 'OVERPAY',
            'LABEL_INVOICE_MISSING' => 'INVOICE_MISSING', 'LABEL_UNIDENTIFIED' => 'UNIDENTIFIED']);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * Prepare Testing Invoice.
     *
     * @param array $initialData
     *
     * @return \AbraFlexi\FakturaVydana
     */
    public function makeInvoice($initialData = [])
    {
        return new \AbraFlexi\FakturaVydana($initialData, ['evidence' => 'vydana']);
    }

    /**
     * Prepare testing payment.
     *
     * @param array $initialData
     *
     * @return \AbraFlexi\Banka
     */
    public function makePayment($initialData = [])
    {
        return new \AbraFlexi\Banka($initialData, ['evidence' => 'banka']);
    }

    public function testGetDocumentTypes(): void
    {
        // Method returns void - skip this test until properly implemented
        $this->markTestIncomplete('getDocumentTypes method needs proper implementation');
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::setStartDay
     */
    public function testSetStartDay(): void
    {
        $this->object->setStartDay(1);
        $this->assertEquals(1, $this->object->daysBack);
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::getPaymentsToProcess
     */
    public function testGetPaymentsToProcess(): void
    {
        $this->object->getPaymentsToProcess(0); // Empty Restult
        $payment = $this->makePayment(['popis' => 'Test GetPaymentsToProcess AbraFlexi-Bricks']);
        $paymentsToProcess = $this->object->getPaymentsToProcess(1);
        $this->assertArrayHasKey(
            $payment->getRecordID(),
            $paymentsToProcess,
            'Can\'t find Payment',
        );
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::getInvoicesToProcess
     */
    public function testGetInvoicesToProcess(): void
    {
        $invoice = $this->makeInvoice(['popis' => 'Test InvoicesToProcess AbraFlexi-Bricks']);
        $invoicesToProcess = $this->object->getInvoicesToProcess(1);
        $this->assertArrayHasKey(
            $invoice->getRecordID(),
            $invoicesToProcess,
            'Can\'t find Invoice',
        );
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::inInvoicesMatchingByBank
     */
    public function testInInvoicesMatchingByBank(): void
    {
        $faktura = $this->makeInvoice(['typDokl' => \AbraFlexi\Functions::code((string) 'FAKTURA'),
            'popis' => 'InvoicesMatchingByBank AbraFlexi-Bricks Test']);
        $zaloha = $this->makeInvoice(['typDokl' => \AbraFlexi\Functions::code((string) 'ZÁLOHA'),
            'popis' => 'InvoicesMatchingByBank AbraFlexi-Bricks Test']);
        $dobropis = $this->makeInvoice(['typDokl' => \AbraFlexi\Functions::code((string) 'DOBROPIS'),
            'popis' => 'InvoicesMatchingByBank AbraFlexi-Bricks Test']);
        $this->object->setStartDay(-1);
        $result = $this->object->outInvoicesMatchingByBank();
        $this->assertIsArray($result);
        $this->object->setStartDay(1);
        $paymentChecker = new \AbraFlexi\Banka(
            null,
            ['detail' => 'custom:sparovano'],
        );
        $paymentsToCheck = $this->object->getPaymentsToProcess(1);
        $this->object->outInvoicesMatchingByBank();

        foreach ($paymentsToCheck as $paymentID => $paymentData) {
            $paymentChecker->loadFromAbraFlexi(\AbraFlexi\Functions::code((string) $paymentData['kod']));
            $this->assertEquals(
                'true',
                $paymentChecker->getDataValue('sparovano'),
                'Matching error',
            );
        }
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::invoicesMatchingByInvoices
     */
    public function testInvoicesMatchingByInvoices(): void
    {
        $faktura = $this->makeInvoice(['typDokl' => \AbraFlexi\Functions::code((string) 'FAKTURA'),
            'popis' => 'InvoicesMatchingByInvoices AbraFlexi-Bricks Test']);
        $zaloha = $this->makeInvoice(['typDokl' => \AbraFlexi\Functions::code((string) 'ZÁLOHA'),
            'popis' => 'InvoicesMatchingByInvoices AbraFlexi-Bricks Test']);
        $dobropis = $this->makeInvoice(['typDokl' => \AbraFlexi\Functions::code((string) 'DOBROPIS'),
            'popis' => 'InvoicesMatchingByInvoices AbraFlexi-Bricks Test']);

        $invoiceChecker = new \AbraFlexi\FakturaVydana(
            null,
            ['detail' => 'custom:sparovano'],
        );
        $invoicesToCheck = $this->object->getPaymentsToProcess(1);

        if (empty($invoicesToCheck)) {
            $this->markTestSkipped(_('No invoices to Process. Please run '));
        } else {
            $this->object->invoicesMatchingByInvoices();

            foreach ($invoicesToCheck as $paymentID => $paymentData) {
                $invoiceChecker->loadFromAbraFlexi($paymentID);
                $this->assertEquals(
                    'true',
                    $invoiceChecker->getDataValue('sparovano'),
                    'Matching error',
                );
            }
        }
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::settleCreditNote
     */
    public function testSettleCreditNote(): void
    {
        $dobropis = $this->makeInvoice(['typDokl' => \AbraFlexi\Functions::code((string) 'ODD'),
            'popis' => 'Test SettleCreditNote AbraFlexi-Bricks']);
        $payment = $this->makePayment();
        $this->assertEquals(
            1,
            $this->object->settleCreditNote($dobropis, $payment),
        );
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::settleProforma
     */
    public function testSettleProforma(): void
    {
        $zaloha = $this->makeInvoice(['typDokl' => \AbraFlexi\Functions::code((string) 'ZÁLOHA'),
            'popis' => 'Test SettleProforma AbraFlexi-Bricks']);
        $payment = $this->makePayment();
        $this->object->settleProforma($zaloha, $payment->getData());
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::settleInvoice
     */
    public function testSettleInvoice(): void
    {
        $invoice = $this->makeInvoice(['typDokl' => \AbraFlexi\Functions::code((string) 'FAKTURA'),
            'popis' => 'Test SettleInvoice AbraFlexi-Bricks PHPUnit']);
        $payment = $this->makePayment();
        $this->assertEquals(1, $this->object->settleInvoice($invoice, $payment));
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::invoiceCopy
     */
    public function testInvoiceCopy(): void
    {
        $invoice = $this->makeInvoice(['popis' => 'Test InvoiceCopy AbraFlexi-Bricks']);
        $this->object->invoiceCopy($invoice, ['poznam' => 'Copied By unitTest']);
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::hotfixDeductionOfAdvances
     */
    public function testHotfixDeductionOfAdvances(): void
    {
        $varSym = \Ease\Functions::randomNumber(1111, 9999);
        $price = \Ease\Functions::randomNumber(11, 99);

        $invoice = $this->makeInvoice(['typDokl' => 'code:ZDD', 'varSym' => $varSym,
            'sumZklZakl' => $price]);
        $payment = $this->makePayment(['varSym' => $varSym, 'sumZklZakl' => $price]);

        $this->object->hotfixDeductionOfAdvances($invoice, $payment);
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::findInvoices
     */
    public function testFindInvoices(): void
    {
        $this->makeInvoice(['varSym' => '123', 'poznam' => 'Test FindInvoices AbraFlexi-Bricks']);
        $this->makeInvoice(['specSym' => '356', 'poznam' => 'Test FindInvoices AbraFlexi-Bricks']);

        $result1 = $this->object->findInvoices(['id' => '1', 'varSym' => '123']);
        $result2 = $this->object->findInvoices(['id' => '2', 'specSym' => '356']);
        $this->assertIsArray($result1);
        $this->assertIsArray($result2);
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::findPayments
     */
    public function testFindPayments(): void
    {
        $result1 = $this->object->findPayments(['varSym' => '123']);
        $result2 = $this->object->findPayments(['specSym' => '356']);
        $this->assertIsArray($result1);
        $this->assertIsArray($result2);
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::findInvoice
     */
    public function testFindInvoice(): void
    {
        $found1 = $this->object->findInvoice(['varSym' => 123]);
        $found2 = $this->object->findInvoice(['specSym' => 456]);
        $this->assertTrue(is_array($found1) || $found1 === null);
        $this->assertTrue(is_array($found2) || $found2 === null);
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::findPayment
     */
    public function testFindPayment(): void
    {
        $result1 = $this->object->findPayment(['varSym' => 123]);
        $result2 = $this->object->findPayment(['specSym' => 456]);
        $this->assertTrue(is_array($result1) || $result1 === null);
        $this->assertTrue(is_array($result2) || $result2 === null);
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::findBestPayment
     */
    public function testFindBestPayment(): void
    {
        $varSym = \Ease\Functions::randomNumber(111111, 999999);
        $specSym = \Ease\Functions::randomNumber(1111, 9999);
        $price = \Ease\Functions::randomNumber(111, 999);

        $invoiceSs = $this->makeInvoice(['varSym' => $varSym, 'specSym' => $specSym,
            'sumCelkem' => $price]);
        $paymentSs = $this->makePayment(['specSym' => $specSym, 'sumCelkem' => $price]);
        $bestSSPayment = $this->object->findBestPayment(
            [$paymentSs->getData()],
            $invoiceSs,
        );

        $this->assertIsObject($bestSSPayment);

        $invoiceVs = $this->makeInvoice(['varSym' => $varSym]);
        $paymentVs = $this->makePayment(['varSym' => $varSym]);
        $bestVSPayment = $this->object->findBestPayment(
            [$paymentVs->getData()],
            $invoiceVs,
        );
    }

    /**
     * @covers \AbraFlexi\Bricks\ParovacFaktur::apiUrlToLink
     */
    public function testApiUrlToLink(): void
    {
        $this->assertEquals(
            '<a href="'.\constant('ABRAFLEXI_URL').'/c/'.\constant('ABRAFLEXI_COMPANY').'/banka.json" target="_blank" rel="nofollow">https://demo.abraflexi.eu:5434/c/demo/banka.json</a>',
            $this->object->apiUrlToLink($this->object->banker->apiURL),
        );
    }
}
